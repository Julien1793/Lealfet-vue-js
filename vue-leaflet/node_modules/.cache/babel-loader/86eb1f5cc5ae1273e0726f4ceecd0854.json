{"ast":null,"code":"import _defineProperty from \"D:/SIG/WEB/Vue lealfet v2/vue-leaflet/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.join.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { LMap, LTileLayer } from 'vue2-leaflet';\nexport default {\n  components: {\n    LMap: LMap,\n    LTileLayer: LTileLayer\n  },\n  data: function data() {\n    return {\n      url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n      center: [48.5532698, 1.930517],\n      zoom: 20\n    };\n  },\n  methods: {\n    centerUpdated: function centerUpdated(center) {\n      this.center = center;\n    },\n    zoomUpdated: function zoomUpdated(zoom) {\n      this.zoom = zoom;\n    }\n  }\n};\n\nfunction onEachFeature(feature, layer) {\n  // does this feature have a property named dz?\n  if (feature.properties && feature.properties.dz) {\n    layer.bindPopup(feature.properties.dz);\n  }\n}\n\nvar featureLayer = new L.GeoJSON(null, _defineProperty({\n  onEachFeature: onEachFeature,\n  style: function style(feature) {\n    return {\n      color: \"red\"\n    };\n  }\n}, \"onEachFeature\", function onEachFeature(feature, layer) {\n  layer.bindPopup('<h3>' + 'Parcelle (IGN)' + '</h3>' + '<p><span>Section : </span>' + feature.properties.section + '<p><span>Numero : </span>' + feature.properties.numero);\n})).addTo(map);\nload_wfs();\n\nfunction loadGeoJson(data) {\n  // console.log(data);\n  featureLayer.clearLayers();\n  featureLayer.addData(data);\n}\n\nmap.on('moveend', load_wfs);\n\nfunction load_wfs() {\n  if (map.getZoom() > start_at_zoom) {\n    var geoJsonUrl = 'https://wxs.ign.fr/parcellaire/geoportail/wfs';\n    var defaultParameters = {\n      service: 'WFS',\n      version: '2.0.0',\n      request: 'getFeature',\n      typeName: 'CADASTRALPARCELS.PARCELLAIRE_EXPRESS:parcelle',\n      //COUNT: 3000,\n      outputFormat: 'json',\n      //format_options: 'callback: getJson',\n      srsName: 'EPSG:4326'\n    }; // Fonction Leaflet pour récupérer la BBOX dans la carte (xmin,ymin,xmax,ymax)\n    // Problème ! cette méthode BBOX n'est pas compatible avec l'API IGN\n    // !!! Cette variable ne peut pas être utilisée dans la requete  !!!\n\n    var customParams_fail = {\n      bbox_fail: map.getBounds().toBBoxString()\n    }; // Création liste : inversement des x;y pour le requetage WFS IGN => ymin,xmin,ymax,xmax\n\n    var test = [map.getBounds().getSouth().toString(), map.getBounds().getWest().toString(), map.getBounds().getNorth().toString(), map.getBounds().getEast().toString()]; // Transformation de la liste BBOX en texte pour le requetage\n\n    var customParams = {\n      bbox: test.join()\n    }; // Renvoie les messages de la BBOX pour vérifier l'inversion des x;y\n\n    console.log(test.join());\n    console.log(customParams_fail);\n    console.log(customParams); // Renvoie l'url avec les requetes => permet de vérifier la construction de l'url\n\n    var parameters = L.Util.extend(defaultParameters, customParams);\n    console.log(geoJsonUrl + L.Util.getParamString(parameters)); // Envoie de la requete avec la méthode ajax\n\n    $.ajax({\n      jsonp: false,\n      url: geoJsonUrl + L.Util.getParamString(parameters),\n      dataType: 'json',\n      jsonpCallback: 'getJson',\n      success: loadGeoJson\n    });\n  } else {\n    //alert(\"Zoom in to see the polygons!\");\n    console.log(\"Zoom in to see the layer!\");\n    featureLayer.clearLayers();\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAkBA;AAEA;EACAA;IACAC,UADA;IAEAC;EAFA,CADA;EAKAC,IALA,kBAKA;IACA;MACAC,yDADA;MAEAC,8BAFA;MAGAC;IAHA;EAKA,CAXA;EAYAC;IACAC,aADA,yBACAH,MADA,EACA;MACA;IACA,CAHA;IAIAI,WAJA,uBAIAH,IAJA,EAIA;MACA;IACA;EANA;AAZA;;AAsBA;EACA;EACA;IACAI;EACA;AACA;;AAEA,iCACA,IADA;EAEAC,4BAFA;EAGAC;IACA;MAAAC;IAAA;EACA;AALA,oBAMA;EACAH,sDACA,4BADA,GACAI,0BADA,GAEA,2BAFA,GAEAA,yBAFA;AAIA,CAXA,GAYAC,KAZA,CAYAC,GAZA;AAaAC;;AAEA;EACA;EACAC;EAEAA;AAEA;;AAEAF;;AAEA;EACA;IACA;IACA;MACAG,cADA;MAEAC,gBAFA;MAGAC,qBAHA;MAIAC,yDAJA;MAKA;MACAC,oBANA;MAOA;MACAC;IARA,EAFA,CAeA;IACA;IACA;;IACA;MACAC;IADA,EAlBA,CAqBA;;IACA,mDACAT,oCADA,EAEAA,qCAFA,EAGAA,oCAHA,EAtBA,CA0BA;;IACA;MAAAU;IAAA,EA3BA,CA6BA;;IACAC;IACAA;IACAA,0BAhCA,CAkCA;;IACA;IACAA,4DApCA,CAsCA;;IACAC;MACAC,YADA;MAEAzB,mDAFA;MAGA0B,gBAHA;MAIAC,wBAJA;MAKAC;IALA;EASA,CAhDA,MAgDA;IACA;IACAL;IACAT;EACA;AACA","names":["components","LMap","LTileLayer","data","url","center","zoom","methods","centerUpdated","zoomUpdated","layer","onEachFeature","style","color","feature","addTo","map","load_wfs","featureLayer","service","version","request","typeName","outputFormat","srsName","bbox_fail","bbox","console","$","jsonp","dataType","jsonpCallback","success"],"sourceRoot":"src/components","sources":["CustomMap.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <l-map\r\n        :center=\"center\"\r\n        :zoom=\"zoom\"\r\n        class=\"map\"\r\n        ref=\"map\"\r\n        @update:center=\"centerUpdated\"\r\n        @update:zoom=\"zoomUpdated\"\r\n        >\r\n        <l-tile-layer\r\n        :url=\"url\"\r\n        ></l-tile-layer>\r\n        \r\n        </l-map>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { LMap, LTileLayer} from 'vue2-leaflet';\r\n\r\nexport default{\r\n    components:{\r\n        LMap,\r\n        LTileLayer\r\n    },\r\n    data(){\r\n        return {\r\n            url:'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\r\n            center:[48.5532698,1.930517],\r\n            zoom:20\r\n        }\r\n    },\r\n    methods:{\r\n        centerUpdated(center){\r\n            this.center = center;\r\n        },\r\n        zoomUpdated(zoom){\r\n            this.zoom = zoom;\r\n        },\r\n    },\r\n};\r\n\r\n    function onEachFeature(feature, layer) {\r\n        // does this feature have a property named dz?\r\n        if (feature.properties && feature.properties.dz) {\r\n            layer.bindPopup(feature.properties.dz);\r\n        }\r\n    }\r\n    \r\n    var featureLayer = new L.GeoJSON(\r\n        null, {\r\n            onEachFeature: onEachFeature,\r\n            style: function (feature){\r\n                return{color:\"red\"};\r\n            },\r\n            onEachFeature: function (feature,layer){\r\n                layer.bindPopup('<h3>'+'Parcelle (IGN)'+'</h3>'+\r\n                '<p><span>Section : </span>'+feature.properties.section +\r\n                '<p><span>Numero : </span>'+feature.properties.numero\r\n                )\r\n            }    \r\n        }).addTo(map);\r\n    load_wfs();\r\n    \r\n    function loadGeoJson(data) {\r\n        // console.log(data);\r\n        featureLayer.clearLayers();\r\n    \r\n        featureLayer.addData(data);\r\n    \r\n    }\r\n    \r\n    map.on('moveend', load_wfs);\r\n    \r\n    function load_wfs() {\r\n        if (map.getZoom() > start_at_zoom) {\r\n            var geoJsonUrl = 'https://wxs.ign.fr/parcellaire/geoportail/wfs';\r\n            var defaultParameters = {\r\n                service: 'WFS',\r\n                version: '2.0.0',\r\n                request: 'getFeature',\r\n                typeName: 'CADASTRALPARCELS.PARCELLAIRE_EXPRESS:parcelle',\r\n                //COUNT: 3000,\r\n                outputFormat: 'json',\r\n                //format_options: 'callback: getJson',\r\n                srsName: 'EPSG:4326'\r\n            };\r\n    \r\n    \r\n    \r\n            // Fonction Leaflet pour récupérer la BBOX dans la carte (xmin,ymin,xmax,ymax)\r\n            // Problème ! cette méthode BBOX n'est pas compatible avec l'API IGN\r\n            // !!! Cette variable ne peut pas être utilisée dans la requete  !!!\r\n            var customParams_fail = {\r\n                bbox_fail: map.getBounds().toBBoxString()\r\n            };\r\n            // Création liste : inversement des x;y pour le requetage WFS IGN => ymin,xmin,ymax,xmax\r\n            var test = [map.getBounds().getSouth().toString(),\r\n                map.getBounds().getWest().toString(),\r\n                map.getBounds().getNorth().toString(),\r\n                map.getBounds().getEast().toString()];\r\n            // Transformation de la liste BBOX en texte pour le requetage\r\n            var customParams={bbox:test.join()};\r\n\r\n            // Renvoie les messages de la BBOX pour vérifier l'inversion des x;y\r\n            console.log(test.join());\r\n            console.log(customParams_fail);\r\n            console.log(customParams);\r\n            \r\n            // Renvoie l'url avec les requetes => permet de vérifier la construction de l'url\r\n            var parameters = L.Util.extend(defaultParameters, customParams);\r\n            console.log(geoJsonUrl + L.Util.getParamString(parameters));\r\n    \r\n            // Envoie de la requete avec la méthode ajax\r\n            $.ajax({\r\n                jsonp: false,\r\n                url: geoJsonUrl + L.Util.getParamString(parameters),\r\n                dataType: 'json',\r\n                jsonpCallback: 'getJson',\r\n                success: loadGeoJson\r\n            });\r\n\r\n    \r\n        } else {\r\n            //alert(\"Zoom in to see the polygons!\");\r\n            console.log(\"Zoom in to see the layer!\");\r\n            featureLayer.clearLayers();\r\n        }\r\n    }\r\n\r\n</script>\r\n<style scoped>\r\n.map{\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}